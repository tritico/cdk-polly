"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const lib_1 = require("../lib");
function closeRecording(kernel) {
    const logfile = kernel.logfile;
    if (!logfile) {
        return Promise.resolve();
    }
    logfile.end();
    return new Promise(ok => {
        logfile.once('finish', () => {
            ok();
        });
    });
}
exports.closeRecording = closeRecording;
/**
 * Start recording all interaction with the kernel object.
 *
 * This method installs a proxy function for each public API in the kernel (methods that do not
 * start with '_') and records input requests and output requests into JSON stream files.
 *
 * @param kernel The kernel object to record.
 * @param inputLog Input log stream
 * @param outputLog Output log stream.
 */
function recordInteraction(kernel, inputOutputLogPath) {
    const logfile = fs.createWriteStream(inputOutputLogPath);
    kernel.logfile = logfile;
    Object.getOwnPropertyNames(lib_1.Kernel.prototype).filter(p => !p.startsWith('_')).forEach(api => {
        const old = Object.getOwnPropertyDescriptor(lib_1.Kernel.prototype, api);
        Object.defineProperty(kernel, api, {
            value(...args) {
                logInput(Object.assign({ api }, args[0]));
                try {
                    const ret = old.value.apply(this, args);
                    // if this is an async function, wait for the promised value.
                    if (ret && ret.then && typeof (ret.then) === 'function') {
                        return new Promise((ok, fail) => {
                            return ret.then((value) => {
                                logOutput({ ok: value });
                                ok(value);
                            }).catch((err) => {
                                logOutput({ error: err.message });
                                fail(err);
                            });
                        });
                    }
                    logOutput({ ok: ret });
                    return ret;
                }
                catch (e) {
                    logOutput({ error: e.message });
                    throw e;
                }
            }
        });
    });
    function logInput(obj) {
        const inputLine = JSON.stringify(obj) + '\n';
        logfile.write('> ' + inputLine);
    }
    function logOutput(obj) {
        const outputLine = JSON.stringify(obj) + '\n';
        logfile.write('< ' + outputLine);
    }
}
exports.recordInteraction = recordInteraction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVjb3JkaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLGdDQUFnQztBQUVoQyxTQUFnQixjQUFjLENBQUMsTUFBYztJQUN6QyxNQUFNLE9BQU8sR0FBb0IsTUFBYyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1YsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDNUI7SUFFRCxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFZCxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUN4QixFQUFFLEVBQUUsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBYkQsd0NBYUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixpQkFBaUIsQ0FBQyxNQUFjLEVBQUUsa0JBQTBCO0lBQ3hFLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hELE1BQWMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBRWxDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZGLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxZQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBRSxDQUFDO1FBRXBFLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUMvQixLQUFLLENBQUMsR0FBRyxJQUFXO2dCQUNoQixRQUFRLGlCQUFHLEdBQUcsSUFBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQztnQkFDOUIsSUFBSTtvQkFDQSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBRXhDLDZEQUE2RDtvQkFDN0QsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxPQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTt3QkFDcEQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTs0QkFDNUIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0NBQzNCLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dDQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7Z0NBQ2xCLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQ0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzRCQUNkLENBQUMsQ0FBQyxDQUFDO3dCQUNQLENBQUMsQ0FBQyxDQUFDO3FCQUNOO29CQUVELFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUN2QixPQUFPLEdBQUcsQ0FBQztpQkFDZDtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDUixTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQ2hDLE1BQU0sQ0FBQyxDQUFDO2lCQUNYO1lBQ0wsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBUTtRQUN0QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM3QyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUyxTQUFTLENBQUMsR0FBUTtRQUN2QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0FBQ0wsQ0FBQztBQTdDRCw4Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBLZXJuZWwgfSBmcm9tICcuLi9saWInO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VSZWNvcmRpbmcoa2VybmVsOiBLZXJuZWwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBsb2dmaWxlOiBmcy5Xcml0ZVN0cmVhbSA9IChrZXJuZWwgYXMgYW55KS5sb2dmaWxlO1xuICAgIGlmICghbG9nZmlsZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgbG9nZmlsZS5lbmQoKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShvayA9PiB7XG4gICAgICAgIGxvZ2ZpbGUub25jZSgnZmluaXNoJywgKCkgPT4ge1xuICAgICAgICAgICAgb2soKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogU3RhcnQgcmVjb3JkaW5nIGFsbCBpbnRlcmFjdGlvbiB3aXRoIHRoZSBrZXJuZWwgb2JqZWN0LlxuICpcbiAqIFRoaXMgbWV0aG9kIGluc3RhbGxzIGEgcHJveHkgZnVuY3Rpb24gZm9yIGVhY2ggcHVibGljIEFQSSBpbiB0aGUga2VybmVsIChtZXRob2RzIHRoYXQgZG8gbm90XG4gKiBzdGFydCB3aXRoICdfJykgYW5kIHJlY29yZHMgaW5wdXQgcmVxdWVzdHMgYW5kIG91dHB1dCByZXF1ZXN0cyBpbnRvIEpTT04gc3RyZWFtIGZpbGVzLlxuICpcbiAqIEBwYXJhbSBrZXJuZWwgVGhlIGtlcm5lbCBvYmplY3QgdG8gcmVjb3JkLlxuICogQHBhcmFtIGlucHV0TG9nIElucHV0IGxvZyBzdHJlYW1cbiAqIEBwYXJhbSBvdXRwdXRMb2cgT3V0cHV0IGxvZyBzdHJlYW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRJbnRlcmFjdGlvbihrZXJuZWw6IEtlcm5lbCwgaW5wdXRPdXRwdXRMb2dQYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb2dmaWxlID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oaW5wdXRPdXRwdXRMb2dQYXRoKTtcbiAgICAoa2VybmVsIGFzIGFueSkubG9nZmlsZSA9IGxvZ2ZpbGU7XG5cbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhLZXJuZWwucHJvdG90eXBlKS5maWx0ZXIocCA9PiAhcC5zdGFydHNXaXRoKCdfJykpLmZvckVhY2goYXBpID0+IHtcbiAgICAgICAgY29uc3Qgb2xkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihLZXJuZWwucHJvdG90eXBlLCBhcGkpITtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoa2VybmVsLCBhcGksIHtcbiAgICAgICAgICAgIHZhbHVlKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgICAgICAgICAgbG9nSW5wdXQoeyBhcGksIC4uLmFyZ3NbMF0gfSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0ID0gb2xkLnZhbHVlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gYXN5bmMgZnVuY3Rpb24sIHdhaXQgZm9yIHRoZSBwcm9taXNlZCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJldCAmJiByZXQudGhlbiAmJiB0eXBlb2YocmV0LnRoZW4pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldC50aGVuKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ091dHB1dCh7IG9rOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2sodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dPdXRwdXQoeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbG9nT3V0cHV0KHsgb2s6IHJldCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ091dHB1dCh7IGVycm9yOiBlLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvZ0lucHV0KG9iajogYW55KSB7XG4gICAgICAgIGNvbnN0IGlucHV0TGluZSA9IEpTT04uc3RyaW5naWZ5KG9iaikgKyAnXFxuJztcbiAgICAgICAgbG9nZmlsZS53cml0ZSgnPiAnICsgaW5wdXRMaW5lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dPdXRwdXQob2JqOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0TGluZSA9IEpTT04uc3RyaW5naWZ5KG9iaikgKyAnXFxuJztcbiAgICAgICAgbG9nZmlsZS53cml0ZSgnPCAnICsgb3V0cHV0TGluZSk7XG4gICAgfVxufVxuIl19