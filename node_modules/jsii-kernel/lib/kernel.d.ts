import * as api from './api';
export declare class Kernel {
    callbackHandler: (callback: api.Callback) => any;
    /**
     * Set to true for verbose debugging.
     */
    traceEnabled: boolean;
    private assemblies;
    private objects;
    private cbs;
    private waiting;
    private promises;
    private nextid;
    private syncInProgress?;
    private installDir?;
    private readonly sandbox;
    private readonly sourceMaps;
    /**
     * Creates a jsii kernel object.
     *
     * @param callbackHandler This handler is invoked when a synchronous callback is called.
     *                        It's responsibility is to execute the callback and return it's
     *                        result (or throw an error).
     */
    constructor(callbackHandler: (callback: api.Callback) => any);
    load(req: api.LoadRequest): Promise<api.LoadResponse>;
    create(req: api.CreateRequest): api.CreateResponse;
    del(req: api.DelRequest): api.DelResponse;
    sget(req: api.StaticGetRequest): api.GetResponse;
    sset(req: api.StaticSetRequest): api.SetResponse;
    get(req: api.GetRequest): api.GetResponse;
    set(req: api.SetRequest): api.SetResponse;
    invoke(req: api.InvokeRequest): api.InvokeResponse;
    sinvoke(req: api.StaticInvokeRequest): api.InvokeResponse;
    begin(req: api.BeginRequest): api.BeginResponse;
    end(req: api.EndRequest): Promise<api.EndResponse>;
    callbacks(_req?: api.CallbacksRequest): api.CallbacksResponse;
    complete(req: api.CompleteRequest): api.CompleteResponse;
    /**
     * Returns the language-specific names for a jsii module.
     * @param assemblyName The name of the jsii module (i.e. jsii$jsii_calculator_lib$)
     */
    naming(req: api.NamingRequest): api.NamingResponse;
    stats(_req?: api.StatsRequest): api.StatsResponse;
    private _addAssembly;
    private _findCtor;
    private _create;
    private _getSuperPropertyName;
    private _applyPropertyOverride;
    private _applyMethodOverride;
    private _findInvokeTarget;
    private _formatTypeRef;
    private _validateMethodArguments;
    private _assemblyFor;
    private _findSymbol;
    private _createObjref;
    private _findObject;
    private _typeInfoForFqn;
    private _typeInfoForMethod;
    private _tryTypeInfoForMethod;
    private _tryTypeInfoForProperty;
    private _typeInfoForProperty;
    private _toSandbox;
    private _fromSandbox;
    private _toSandboxValues;
    private _debug;
    /**
     * Ensures that `fn` is called and defends against beginning to invoke
     * async methods until fn finishes (successfully or not).
     */
    private _ensureSync;
    private _findPropertyTarget;
    private _fqnForObject;
    private _mkobjid;
    private _makecbid;
    private _makeprid;
    private _wrapSandboxCode;
    /**
     * Executes arbitrary code in a VM sandbox.
     *
     * @param code       JavaScript code to be executed in the VM
     * @param sandbox    a VM context to use for running the code
     * @param sourceMaps source maps to be used in case an exception is thrown
     * @param filename   the file name to use for the executed code
     *
     * @returns the result of evaluating the code
     */
    private _execute;
}
