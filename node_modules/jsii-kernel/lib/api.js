"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TOKEN_REF = '$jsii.byref';
exports.TOKEN_DATE = '$jsii.date';
exports.TOKEN_ENUM = '$jsii.enum';
class ObjRef {
}
exports.ObjRef = ObjRef;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQWEsUUFBQSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQzFCLFFBQUEsVUFBVSxHQUFHLFlBQVksQ0FBQztBQUMxQixRQUFBLFVBQVUsR0FBRyxZQUFZLENBQUM7QUFFdkMsTUFBYSxNQUFNO0NBRWxCO0FBRkQsd0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVE9LRU5fUkVGID0gJyRqc2lpLmJ5cmVmJztcbmV4cG9ydCBjb25zdCBUT0tFTl9EQVRFID0gJyRqc2lpLmRhdGUnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX0VOVU0gPSAnJGpzaWkuZW51bSc7XG5cbmV4cG9ydCBjbGFzcyBPYmpSZWYge1xuICAgIFt0b2tlbjogc3RyaW5nXTogc3RyaW5nOyAvLyB0b2tlbiA9IFRPS0VOX1JFRlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJyaWRlIHtcbiAgICBtZXRob2Q/OiBzdHJpbmc7XG4gICAgcHJvcGVydHk/OiBzdHJpbmc7XG4gICAgY29va2llPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbGxiYWNrIHtcbiAgICBjYmlkOiBzdHJpbmc7XG4gICAgY29va2llOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaW52b2tlPzogSW52b2tlUmVxdWVzdDtcbiAgICBnZXQ/OiBHZXRSZXF1ZXN0O1xuICAgIHNldD86IFNldFJlcXVlc3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVsbG9SZXNwb25zZSB7XG4gICAgaGVsbG86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2FkUmVxdWVzdCB7XG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoZSBhc3NlbWJseSAqL1xuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8qKiBBc3NlbWJseSB2ZXJzaW9uICovXG4gICAgdmVyc2lvbjogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSB0YXJiYWxsIG9mIHRoZSBwYWNrYWdlICovXG4gICAgdGFyYmFsbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRSZXNwb25zZSB7XG4gICAgYXNzZW1ibHk6IHN0cmluZztcbiAgICB0eXBlczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVJlcXVlc3Qge1xuICAgIGZxbjogc3RyaW5nXG4gICAgYXJncz86IGFueVtdXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVbXVxufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVJlc3BvbnNlIGV4dGVuZHMgT2JqUmVmIHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbFJlcXVlc3Qge1xuICAgIG9ianJlZjogT2JqUmVmO1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIERlbFJlc3BvbnNlIHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFJlcXVlc3Qge1xuICAgIG9ianJlZjogT2JqUmVmO1xuICAgIHByb3BlcnR5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGljR2V0UmVxdWVzdCB7XG4gICAgZnFuOiBzdHJpbmc7XG4gICAgcHJvcGVydHk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRSZXNwb25zZSB7XG4gICAgdmFsdWU6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNTZXRSZXF1ZXN0IHtcbiAgICBmcW46IHN0cmluZztcbiAgICBwcm9wZXJ0eTogc3RyaW5nO1xuICAgIHZhbHVlOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0UmVxdWVzdCB7XG4gICAgb2JqcmVmOiBPYmpSZWY7XG4gICAgcHJvcGVydHk6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIFNldFJlc3BvbnNlIHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0ludm9rZVJlcXVlc3QgIHtcbiAgICBmcW46IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICBhcmdzPzogYW55W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW52b2tlUmVxdWVzdCB7XG4gICAgb2JqcmVmOiBPYmpSZWY7XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgYXJncz86IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludm9rZVJlc3BvbnNlIHtcbiAgICByZXN1bHQ6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZWdpblJlcXVlc3Qge1xuICAgIG9ianJlZjogT2JqUmVmO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIGFyZ3M/OiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZWdpblJlc3BvbnNlIHtcbiAgICBwcm9taXNlaWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbmRSZXF1ZXN0IHtcbiAgICBwcm9taXNlaWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbmRSZXNwb25zZSB7XG4gICAgcmVzdWx0OiBhbnk7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbGJhY2tzUmVxdWVzdCB7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbGJhY2tzUmVzcG9uc2Uge1xuICAgIGNhbGxiYWNrczogQ2FsbGJhY2tbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0ZVJlcXVlc3Qge1xuICAgIGNiaWQ6IHN0cmluZztcbiAgICBlcnI/OiBzdHJpbmc7XG4gICAgcmVzdWx0PzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlUmVzcG9uc2Uge1xuICAgIGNiaWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYW1pbmdSZXF1ZXN0IHtcbiAgICBhc3NlbWJseTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWluZ1Jlc3BvbnNlIHtcbiAgICBuYW1pbmc6IHsgW2xhbmd1YWdlOiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgdW5kZWZpbmVkIH07XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHNSZXF1ZXN0IHtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0c1Jlc3BvbnNlIHtcbiAgICBvYmplY3RDb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBLZXJuZWxSZXF1ZXN0ID1cbiAgICBMb2FkUmVxdWVzdCB8XG4gICAgQ3JlYXRlUmVxdWVzdCB8XG4gICAgRGVsUmVxdWVzdCB8XG4gICAgR2V0UmVxdWVzdCB8XG4gICAgU2V0UmVxdWVzdCB8XG4gICAgSW52b2tlUmVxdWVzdCB8XG4gICAgQmVnaW5SZXF1ZXN0IHxcbiAgICBFbmRSZXF1ZXN0IHxcbiAgICBDYWxsYmFja3NSZXF1ZXN0IHxcbiAgICBDb21wbGV0ZVJlcXVlc3QgfFxuICAgIE5hbWluZ1JlcXVlc3QgfFxuICAgIFN0YXRzUmVxdWVzdDtcblxuZXhwb3J0IHR5cGUgS2VybmVsUmVzcG9uc2UgPVxuICAgIEhlbGxvUmVzcG9uc2UgfFxuICAgIExvYWRSZXNwb25zZSB8XG4gICAgQ3JlYXRlUmVzcG9uc2UgfFxuICAgIERlbFJlc3BvbnNlIHxcbiAgICBHZXRSZXNwb25zZSB8XG4gICAgU2V0UmVzcG9uc2UgfFxuICAgIEludm9rZVJlc3BvbnNlIHxcbiAgICBCZWdpblJlc3BvbnNlIHxcbiAgICBFbmRSZXNwb25zZSB8XG4gICAgQ2FsbGJhY2tzUmVzcG9uc2UgfFxuICAgIENvbXBsZXRlUmVzcG9uc2UgfFxuICAgIE5hbWluZ1Jlc3BvbnNlIHxcbiAgICBTdGF0c1Jlc3BvbnNlO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9rYXlSZXNwb25zZSB7XG4gICAgb2s6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvclJlc3BvbnNlIHtcbiAgICBlcnJvcjogc3RyaW5nO1xuICAgIHN0YWNrPzogc3RyaW5nO1xufVxuIl19