{
    "$ref": "#/definitions/Assembly",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Assembly": {
            "description": "A JSII assembly specification.",
            "properties": {
                "author": {
                    "$ref": "#/definitions/Person",
                    "description": "The main author of this package."
                },
                "bundled": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List if bundled dependencies (these are not expected to be jsii assemblies).",
                    "type": "object"
                },
                "contributors": {
                    "description": "Additional contributors to this package.",
                    "items": {
                        "$ref": "#/definitions/Person"
                    },
                    "type": "array"
                },
                "dependencies": {
                    "additionalProperties": {
                        "$ref": "#/definitions/PackageVersion"
                    },
                    "description": "Dependencies on other assemblies (with semver), the key is the JSII assembly name.",
                    "type": "object"
                },
                "description": {
                    "description": "Description of the assembly, maps to \"description\" from package.json\nThis is required since some package managers (like Maven) require it.",
                    "type": "string"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "fingerprint": {
                    "description": "A fingerprint that can be used to determine if the specification has changed.",
                    "minLength": 1,
                    "type": "string"
                },
                "homepage": {
                    "description": "The url to the project homepage. Maps to \"homepage\" from package.json.",
                    "type": "string"
                },
                "license": {
                    "description": "The SPDX name of the license this assembly is distributed on.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the assembly",
                    "minLength": 1,
                    "type": "string"
                },
                "readme": {
                    "description": "The top-level readme document for this assembly (if any).",
                    "properties": {
                        "markdown": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "markdown"
                    ],
                    "type": "object"
                },
                "repository": {
                    "description": "The module repository, maps to \"repository\" from package.json\nThis is required since some package managers (like Maven) require it.",
                    "properties": {
                        "type": {
                            "description": "The type of the repository (``git``, ``svn``, ...)",
                            "type": "string"
                        },
                        "url": {
                            "description": "The URL of the repository.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "type",
                        "url"
                    ],
                    "type": "object"
                },
                "schema": {
                    "description": "The version of the spec schema",
                    "enum": [
                        "jsii/1.0"
                    ],
                    "type": "string"
                },
                "targets": {
                    "$ref": "#/definitions/AssemblyTargets",
                    "description": "A map of target name to configuration, which is used when generating packages for\nvarious languages."
                },
                "types": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/TypeBase"
                                    },
                                    {
                                        "$ref": "#/definitions/ClassType"
                                    }
                                ]
                            },
                            {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/TypeBase"
                                    },
                                    {
                                        "$ref": "#/definitions/EnumType"
                                    }
                                ]
                            },
                            {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/TypeBase"
                                    },
                                    {
                                        "$ref": "#/definitions/InterfaceType"
                                    }
                                ]
                            }
                        ]
                    },
                    "description": "All types in the assembly, keyed by their fully-qualified-name",
                    "type": "object"
                },
                "version": {
                    "description": "The version of the assembly",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "author",
                "description",
                "fingerprint",
                "homepage",
                "license",
                "name",
                "repository",
                "schema",
                "version"
            ],
            "type": "object"
        },
        "AssemblyTargets": {
            "additionalProperties": {
                "additionalProperties": {
                },
                "type": "object"
            },
            "description": "Configurable targets for an asembly.",
            "type": "object"
        },
        "ClassType": {
            "description": "Represents classes.",
            "properties": {
                "abstract": {
                    "description": "Indicates if this class is an abstract class.",
                    "type": "boolean"
                },
                "assembly": {
                    "description": "The name of the assembly the type belongs to.",
                    "minLength": 1,
                    "type": "string"
                },
                "base": {
                    "$ref": "#/definitions/NamedTypeReference",
                    "description": "Base class (optional)."
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "fqn": {
                    "description": "The fully qualified name of the type (``<assembly>.<namespace>.<name>``)",
                    "minLength": 3,
                    "type": "string"
                },
                "initializer": {
                    "$ref": "#/definitions/Method",
                    "description": "Initializer (constructor) method."
                },
                "interfaces": {
                    "description": "The set of interfaces implemented by this class.",
                    "items": {
                        "$ref": "#/definitions/NamedTypeReference"
                    },
                    "type": "array"
                },
                "kind": {
                    "description": "The kind of the type.",
                    "enum": [
                        "class"
                    ],
                    "type": "string"
                },
                "methods": {
                    "description": "List of methods.",
                    "items": {
                        "$ref": "#/definitions/Method"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The simple name of the type (MyClass).",
                    "minLength": 1,
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the type (``foo.bar.baz``). When undefined, the type is located at the root of the assembly\n(it's ``fqn`` would be like ``<assembly>.<name>``). If the `namespace` corresponds to an existing type's\nnamespace-qualified (e.g: ``<namespace>.<name>``), then the current type is a nested type.",
                    "type": "string"
                },
                "properties": {
                    "description": "List of properties.",
                    "items": {
                        "$ref": "#/definitions/Property"
                    },
                    "type": "array"
                }
            },
            "required": [
                "assembly",
                "fqn",
                "kind",
                "name"
            ],
            "type": "object"
        },
        "CollectionKind": {
            "description": "Kinds of collections.",
            "enum": [
                "array",
                "map"
            ],
            "type": "string"
        },
        "CollectionTypeReference": {
            "description": "Reference to a collection type.",
            "properties": {
                "collection": {
                    "properties": {
                        "elementtype": {
                            "anyOf": [
                                {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/TypeReferenceBase"
                                        },
                                        {
                                            "$ref": "#/definitions/NamedTypeReference"
                                        }
                                    ]
                                },
                                {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/TypeReferenceBase"
                                        },
                                        {
                                            "$ref": "#/definitions/PrimitiveTypeReference"
                                        }
                                    ]
                                },
                                {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/TypeReferenceBase"
                                        },
                                        {
                                            "$ref": "#/definitions/CollectionTypeReference"
                                        }
                                    ]
                                },
                                {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/TypeReferenceBase"
                                        },
                                        {
                                            "$ref": "#/definitions/UnionTypeReference"
                                        }
                                    ]
                                }
                            ],
                            "description": "The type of an element (map keys are always strings)."
                        },
                        "kind": {
                            "$ref": "#/definitions/CollectionKind",
                            "description": "The kind of collection."
                        }
                    },
                    "required": [
                        "elementtype",
                        "kind"
                    ],
                    "type": "object"
                },
                "optional": {
                    "description": "Indicates if this value is optional.",
                    "type": "boolean"
                },
                "promise": {
                    "description": "Indicates if this type refers to a promise.",
                    "type": "boolean"
                }
            },
            "required": [
                "collection"
            ],
            "type": "object"
        },
        "Docs": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "Key value pairs of documentation nodes.\nBased on JSDoc.",
            "type": "object"
        },
        "EnumMember": {
            "description": "Represents a member of an enum.",
            "properties": {
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "name": {
                    "description": "The name/symbol of the member.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "EnumType": {
            "description": "Represents an enum type.",
            "properties": {
                "assembly": {
                    "description": "The name of the assembly the type belongs to.",
                    "minLength": 1,
                    "type": "string"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "fqn": {
                    "description": "The fully qualified name of the type (``<assembly>.<namespace>.<name>``)",
                    "minLength": 3,
                    "type": "string"
                },
                "kind": {
                    "description": "The kind of the type.",
                    "enum": [
                        "enum"
                    ],
                    "type": "string"
                },
                "members": {
                    "description": "Members of the enum.",
                    "items": {
                        "$ref": "#/definitions/EnumMember"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The simple name of the type (MyClass).",
                    "minLength": 1,
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the type (``foo.bar.baz``). When undefined, the type is located at the root of the assembly\n(it's ``fqn`` would be like ``<assembly>.<name>``). If the `namespace` corresponds to an existing type's\nnamespace-qualified (e.g: ``<namespace>.<name>``), then the current type is a nested type.",
                    "type": "string"
                }
            },
            "required": [
                "assembly",
                "fqn",
                "kind",
                "members",
                "name"
            ],
            "type": "object"
        },
        "InterfaceType": {
            "properties": {
                "assembly": {
                    "description": "The name of the assembly the type belongs to.",
                    "minLength": 1,
                    "type": "string"
                },
                "datatype": {
                    "description": "True if this interface only contains properties. Different backends might\nhave idiomatic ways to allow defining concrete instances such interfaces.\nFor example, in Java, the generator will produce a PoJo and a builder\nwhich will allow users to create a concrete object with data which\nadheres to this interface.",
                    "type": "boolean"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "fqn": {
                    "description": "The fully qualified name of the type (``<assembly>.<namespace>.<name>``)",
                    "minLength": 3,
                    "type": "string"
                },
                "interfaces": {
                    "description": "All the base interfaces that this interface extends.",
                    "items": {
                        "$ref": "#/definitions/NamedTypeReference"
                    },
                    "type": "array"
                },
                "kind": {
                    "description": "The kind of the type.",
                    "enum": [
                        "interface"
                    ],
                    "type": "string"
                },
                "methods": {
                    "description": "List of methods.",
                    "items": {
                        "$ref": "#/definitions/Method"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "The simple name of the type (MyClass).",
                    "minLength": 1,
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the type (``foo.bar.baz``). When undefined, the type is located at the root of the assembly\n(it's ``fqn`` would be like ``<assembly>.<name>``). If the `namespace` corresponds to an existing type's\nnamespace-qualified (e.g: ``<namespace>.<name>``), then the current type is a nested type.",
                    "type": "string"
                },
                "properties": {
                    "description": "List of properties.",
                    "items": {
                        "$ref": "#/definitions/Property"
                    },
                    "type": "array"
                }
            },
            "required": [
                "assembly",
                "fqn",
                "kind",
                "name"
            ],
            "type": "object"
        },
        "Method": {
            "description": "Represents a method.",
            "properties": {
                "abstract": {
                    "description": "Is this method an abstract method (this means the class will also be an abstract class)",
                    "type": "boolean"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "initializer": {
                    "description": "True if this method is an initializer, in which case it won't have a return type",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the method. Undefined if this method is a initializer.",
                    "type": "string"
                },
                "overrides": {
                    "$ref": "#/definitions/NamedTypeReference",
                    "default": "undefined",
                    "description": "The name of the parent type (class or interface) that this entity overrides or implements. If undefined, then\nthis entity is the first in it's hierarchy to declare this entity."
                },
                "parameters": {
                    "description": "The parameters of the method/initializer",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    },
                    "type": "array"
                },
                "protected": {
                    "description": "Indicates if this method is protected (otherwise it is public)",
                    "type": "boolean"
                },
                "returns": {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/NamedTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/PrimitiveTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/CollectionTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/UnionTypeReference"
                                }
                            ]
                        }
                    ],
                    "description": "The return type of the method (undefined if void or initializer)"
                },
                "static": {
                    "description": "Indicates if this is a static method.",
                    "type": "boolean"
                },
                "variadic": {
                    "description": "Indicates whether this method is variadic or not. When ``true``, the last\nelement of ``#parameters`` will also be flagged ``#variadic``.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NamedTypeReference": {
            "description": "Reference to a named type, defined by this assembly or one of it's dependencies.",
            "properties": {
                "fqn": {
                    "description": "The fully-qualified-name of the type (can be located in the\n``spec.types[fqn]``` of the assembly that defines the type).\n     *",
                    "type": "string"
                },
                "optional": {
                    "description": "Indicates if this value is optional.",
                    "type": "boolean"
                },
                "promise": {
                    "description": "Indicates if this type refers to a promise.",
                    "type": "boolean"
                }
            },
            "required": [
                "fqn"
            ],
            "type": "object"
        },
        "PackageVersion": {
            "description": "The version of a package.",
            "properties": {
                "dependencies": {
                    "additionalProperties": {
                        "$ref": "#/definitions/PackageVersion"
                    },
                    "description": "Dependencies of this dependency",
                    "type": "object"
                },
                "peer": {
                    "description": "Indicates if this dependency is a peer dependency or a normal dependency.\n\nPeer dependencies are expected to be explicitly defined by the user of\nthis library instead of brought in as transitive dependencies.\n\njsii enforces that if this module exports a type from a dependency, this\ndependency must be defined as a peer and not as a normal dependency.\nOtherwise, it would be impossible to safely use two versions of this\ndependency in a closure.",
                    "type": "boolean"
                },
                "targets": {
                    "$ref": "#/definitions/AssemblyTargets",
                    "description": "Targets for a given assembly."
                },
                "version": {
                    "description": "Version of the package.",
                    "minLength": 1,
                    "type": "string"
                }
            },
            "required": [
                "version"
            ],
            "type": "object"
        },
        "Parameter": {
            "description": "Represents a method parameter.",
            "properties": {
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "name": {
                    "description": "The name of the parameter.",
                    "minLength": 1,
                    "type": "string"
                },
                "type": {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/NamedTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/PrimitiveTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/CollectionTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/UnionTypeReference"
                                }
                            ]
                        }
                    ],
                    "description": "The type of the parameter."
                },
                "variadic": {
                    "description": "Whather this argument is the \"rest\" of a variadic signature.\nThe ``#type`` is that of every individual argument of the variadic list.",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "Person": {
            "description": "Metadata about people or organizations associated with the project that\nresulted in the Assembly. Some of this metadata is required in order to\npublish to certain package repositories (for example, Maven Central), but is\nnot normalized, and the meaning of fields (role, for example), is up to each\nproject maintainer.",
            "properties": {
                "email": {
                    "description": "The email of the person",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the person",
                    "type": "string"
                },
                "organization": {
                    "description": "If true, this person is, in fact, an organization",
                    "type": "boolean"
                },
                "roles": {
                    "description": "A list of roles this person has in the project, for example `maintainer`,\n`contributor`, `owner`, ...",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "url": {
                    "description": "The URL for the person",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "roles"
            ],
            "type": "object"
        },
        "PrimitiveType": {
            "description": "Kinds of primitive types.",
            "enum": [
                "any",
                "boolean",
                "date",
                "json",
                "number",
                "string"
            ],
            "type": "string"
        },
        "PrimitiveTypeReference": {
            "description": "Reference to a primitive type.",
            "properties": {
                "optional": {
                    "description": "Indicates if this value is optional.",
                    "type": "boolean"
                },
                "primitive": {
                    "$ref": "#/definitions/PrimitiveType",
                    "description": "If this is a reference to a primitive type, this will include the\nprimitive type kind."
                },
                "promise": {
                    "description": "Indicates if this type refers to a promise.",
                    "type": "boolean"
                }
            },
            "required": [
                "primitive"
            ],
            "type": "object"
        },
        "Property": {
            "description": "A class property.",
            "properties": {
                "abstract": {
                    "description": "Indicates if this property is abstract",
                    "type": "boolean"
                },
                "const": {
                    "description": "A hint that indicates that this static, immutable property is initialized\nduring startup. This allows emitting \"const\" idioms in different target languages.\nImplies `static` and `immutable`.",
                    "type": "boolean"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "immutable": {
                    "description": "Indicates if this property only has a getter (immutable).",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the property.",
                    "minLength": 1,
                    "type": "string"
                },
                "overrides": {
                    "$ref": "#/definitions/NamedTypeReference",
                    "default": "undefined",
                    "description": "The name of the parent type (class or interface) that this entity overrides or implements. If undefined, then\nthis entity is the first in it's hierarchy to declare this entity."
                },
                "protected": {
                    "description": "Indicates if this property is protected (otherwise it is public)",
                    "type": "boolean"
                },
                "static": {
                    "description": "Indicates if this is a static property.",
                    "type": "boolean"
                },
                "type": {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/NamedTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/PrimitiveTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/CollectionTypeReference"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TypeReferenceBase"
                                },
                                {
                                    "$ref": "#/definitions/UnionTypeReference"
                                }
                            ]
                        }
                    ],
                    "description": "The type of the property."
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "TypeBase": {
            "description": "Common attributes of a type definition.",
            "properties": {
                "assembly": {
                    "description": "The name of the assembly the type belongs to.",
                    "minLength": 1,
                    "type": "string"
                },
                "docs": {
                    "$ref": "#/definitions/Docs",
                    "description": "Key value pairs of documentation nodes.\nBased on JSDoc."
                },
                "fqn": {
                    "description": "The fully qualified name of the type (``<assembly>.<namespace>.<name>``)",
                    "minLength": 3,
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/TypeKind",
                    "description": "The kind of the type."
                },
                "name": {
                    "description": "The simple name of the type (MyClass).",
                    "minLength": 1,
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of the type (``foo.bar.baz``). When undefined, the type is located at the root of the assembly\n(it's ``fqn`` would be like ``<assembly>.<name>``). If the `namespace` corresponds to an existing type's\nnamespace-qualified (e.g: ``<namespace>.<name>``), then the current type is a nested type.",
                    "type": "string"
                }
            },
            "required": [
                "assembly",
                "fqn",
                "kind",
                "name"
            ],
            "type": "object"
        },
        "TypeKind": {
            "description": "Kinds of types.",
            "enum": [
                "class",
                "enum",
                "interface"
            ],
            "type": "string"
        },
        "TypeReferenceBase": {
            "description": "Common attributes of a TypeReference.",
            "properties": {
                "optional": {
                    "description": "Indicates if this value is optional.",
                    "type": "boolean"
                },
                "promise": {
                    "description": "Indicates if this type refers to a promise.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "UnionTypeReference": {
            "description": "Reference to a union type.",
            "properties": {
                "optional": {
                    "description": "Indicates if this value is optional.",
                    "type": "boolean"
                },
                "promise": {
                    "description": "Indicates if this type refers to a promise.",
                    "type": "boolean"
                },
                "union": {
                    "description": "Indicates that this is a union type, which means it can be one of a set of types.",
                    "properties": {
                        "types": {
                            "description": "All the possible types (including the primary type).",
                            "items": {
                                "anyOf": [
                                    {
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/TypeReferenceBase"
                                            },
                                            {
                                                "$ref": "#/definitions/NamedTypeReference"
                                            }
                                        ]
                                    },
                                    {
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/TypeReferenceBase"
                                            },
                                            {
                                                "$ref": "#/definitions/PrimitiveTypeReference"
                                            }
                                        ]
                                    },
                                    {
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/TypeReferenceBase"
                                            },
                                            {
                                                "$ref": "#/definitions/CollectionTypeReference"
                                            }
                                        ]
                                    },
                                    {
                                        "allOf": [
                                            {
                                                "$ref": "#/definitions/TypeReferenceBase"
                                            },
                                            {
                                                "$ref": "#/definitions/UnionTypeReference"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "minItems": 2,
                            "type": "array"
                        }
                    },
                    "required": [
                        "types"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "union"
            ],
            "type": "object"
        }
    }
}

